Of course. Here is the code to implement the **Leaderboard** feature.

I've broken it down into three parts: the backend API, the frontend component, and the navigation update.

-----

### 1\. Backend API Endpoint (`/pages/api/leaderboard.ts`)

This new API route will calculate the scores and return the ranked user data. It assigns 5 points for each post, 2 for each comment, and 1 for each like received.

```typescript
// pages/api/leaderboard.ts
import { db } from '../../db';
import { users, posts, comments, likes } from '../../db/schema';
import { sql } from 'drizzle-orm';
import type { NextApiRequest, NextApiResponse } from 'next';

// Define the structure of our leaderboard data
interface LeaderboardEntry {
  rank: number;
  id: string;
  firstName: string;
  lastName: string;
  avatarUrl: string | null;
  score: number;
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<LeaderboardEntry[] | { error: string }>
) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  try {
    // This query calculates a score for each user.
    // We can adjust the weights (5 for a post, 2 for a comment, 1 for a like) as needed.
    const leaderboardData = await db
      .select({
        id: users.id,
        firstName: users.firstName,
        lastName: users.lastName,
        avatarUrl: users.avatarUrl,
        score: sql<number>`
          (
            (SELECT COUNT(*) FROM ${posts} WHERE ${posts}.userId = ${users}.id) * 5 +
            (SELECT COUNT(*) FROM ${comments} WHERE ${comments}.userId = ${users}.id) * 2 +
            (
              SELECT COUNT(*) FROM ${likes}
              INNER JOIN ${posts} ON ${likes}.postId = ${posts}.id
              WHERE ${posts}.userId = ${users}.id
            ) * 1
          )::int
        `,
      })
      .from(users)
      .orderBy(sql`score DESC`)
      .limit(100); // Let's show the top 100 users

    // Add the rank to each entry
    const rankedLeaderboard = leaderboardData.map((user, index) => ({
      ...user,
      rank: index + 1,
    }));

    res.status(200).json(rankedLeaderboard);
  } catch (error) {
    console.error('Error fetching leaderboard data:', error);
    res.status(500).json({ error: 'Failed to fetch leaderboard data.' });
  }
}
```

-----

### 2\. Frontend Component (`/components/Leaderboard.tsx`)

This new React component will fetch the data from the API endpoint we just created and display it in a user-friendly table.

```tsx
// components/Leaderboard.tsx
import React, { useState, useEffect } from 'react';

interface LeaderboardEntry {
  rank: number;
  id: string;
  firstName: string;
  lastName: string;
  avatarUrl: string | null;
  score: number;
}

const Leaderboard: React.FC = () => {
  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchLeaderboard = async () => {
      try {
        setLoading(true);
        const response = await fetch('/api/leaderboard');
        if (!response.ok) {
          throw new Error('Failed to fetch leaderboard data.');
        }
        const data: LeaderboardEntry[] = await response.json();
        setLeaderboard(data);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'An unknown error occurred.');
      } finally {
        setLoading(false);
      }
    };

    fetchLeaderboard();
  }, []);

  if (loading) {
    return <div className="text-center p-8">Loading Leaderboard...</div>;
  }

  if (error) {
    return <div className="text-center p-8 text-red-500">Error: {error}</div>;
  }

  return (
    <div className="container mx-auto p-4 sm:p-6 lg:p-8">
      <h1 className="text-3xl font-bold mb-6 text-gray-800 dark:text-white">üèÜ Engagement Leaderboard</h1>
      <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden">
        <table className="min-w-full leading-normal">
          <thead>
            <tr>
              <th className="px-5 py-3 border-b-2 border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-900 text-left text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase tracking-wider">
                Rank
              </th>
              <th className="px-5 py-3 border-b-2 border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-900 text-left text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase tracking-wider">
                User
              </th>
              <th className="px-5 py-3 border-b-2 border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-900 text-left text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase tracking-wider">
                Score
              </th>
            </tr>
          </thead>
          <tbody>
            {leaderboard.map((entry) => (
              <tr key={entry.id} className="hover:bg-gray-50 dark:hover:bg-gray-700">
                <td className="px-5 py-4 border-b border-gray-200 dark:border-gray-700 text-sm">
                  <p className="text-gray-900 dark:text-white whitespace-no-wrap font-bold text-lg">{entry.rank}</p>
                </td>
                <td className="px-5 py-4 border-b border-gray-200 dark:border-gray-700 text-sm">
                  <div className="flex items-center">
                    <div className="flex-shrink-0 w-10 h-10">
                      <img
                        className="w-full h-full rounded-full"
                        src={entry.avatarUrl || '/default-avatar.png'}
                        alt={`${entry.firstName} ${entry.lastName}`}
                      />
                    </div>
                    <div className="ml-3">
                      <p className="text-gray-900 dark:text-white whitespace-no-wrap">
                        {entry.firstName} {entry.lastName}
                      </p>
                    </div>
                  </div>
                </td>
                <td className="px-5 py-4 border-b border-gray-200 dark:border-gray-700 text-sm">
                  <p className="text-gray-900 dark:text-white whitespace-no-wrap font-semibold">{entry.score}</p>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

// You would also create a new page file e.g., /pages/leaderboard.tsx
// to render this component.
//
// import Leaderboard from '../components/Leaderboard';
// const LeaderboardPage = () => <Leaderboard />;
// export default LeaderboardPage;

```

-----

### 3\. Navigation Update (`/components/SidebarFixed.tsx`)

Finally, let's add a link to the new Leaderboard page in the main sidebar so users can find it.

```tsx
// components/SidebarFixed.tsx
// ... (existing imports)

// Inside the SidebarFixed component, find the navigation list (<ul>)
// and add the new link.

// ...

<li className="px-3 py-2 rounded-sm mb-0.5 last:mb-0">
  <NavLink
    end
    to="/leaderboard" // The route for our new page
    className={({ isActive }) =>
      'block text-slate-200 truncate transition duration-150 ' +
      (isActive ? 'hover:text-slate-200' : 'hover:text-white')
    }
  >
    <div className="flex items-center">
      {/* Icon for Leaderboard */}
      <svg className="shrink-0 h-6 w-6" viewBox="0 0 24 24">
        <path
          className="fill-current text-slate-600"
          d="M16 11V3H8v8H2v10h20V11h-6zM10 5h4v14h-4V5zM4 13h4v6H4v-6zm16 6h-4v-6h4v6z"
        />
      </svg>
      <span className="text-sm font-medium ml-3 lg:opacity-0 lg:sidebar-expanded:opacity-100 2xl:opacity-100 duration-200">
        Leaderboard
      </span>
    </div>
  </NavLink>
</li>

// ... (rest of the component)
```

With these changes, the "Leaderboard missing" issue is resolved. We've created the backend logic, the frontend display, and made it accessible to users.

Ready to proceed with the next issue, **"Failed to add a church"**?