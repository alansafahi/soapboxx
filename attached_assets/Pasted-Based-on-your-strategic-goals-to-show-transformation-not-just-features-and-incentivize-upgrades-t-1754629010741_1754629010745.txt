Based on your strategic goals to "show transformation, not just features" and incentivize upgrades through a "grace-driven paywall," it would be far more effective to **tier access to the reading plans.**

Providing all reading plans to a free user removes a key incentive to upgrade. By structuring the plans to align with a user's spiritual growth journey, you make the upgrade feel less like a commercial transaction and more like a natural, celebrated step in their faith.

### Recommended Tiered Reading Plan Access

Here is the recommended differentiation for the plans, where each tier unlocks a new level of spiritual engagement.

| Plan Name | Access Level | Recommended Reading Plans |
| :--- | :--- | :--- |
| **Disciple (Free)** | **Foundational & Introductory** | ✓ **New Testament in a Year:** An accessible plan to get started. \<br\>✓ **Old Testament in a Year:** A solid plan for a user's first long-term engagement. |
| **Servant (Standard)** | **Enhanced & Thematic** | ✓ **Everything in Disciple, plus:** \<br\>✓ **Gospels in 40 Days:** A shorter, more focused plan for deepening study. \<br\>✓ **Thematic Journeys:** AI-curated plans on specific topics (e.g., "Peace in Anxiety") that provide tangible, personalized value. \<br\>✓ **Character-Based Studies:** Engaging plans that follow the journeys of biblical figures. |
| **Torchbearer (Premium)** | **Advanced & Immersive** | ✓ **Everything in Servant, plus:** \<br\>✓ **Chronological Order:** The most immersive way to read the Bible. \<br\>✓ **As It Happened:** A unique, specific historical timeline plan. \<br\>✓ **AI-Powered Audio Bible Routines:** Personalized audio plans that leverage your app's most advanced AI features. |

### Instructions for Replit to Implement Tiered Plans

The implementation should use the existing `FeatureGate.tsx` component and a role-based check to conditionally render or activate plans.

1.  **Backend (`server/routes.ts` & `server/storage.ts`):**

      * Update the API routes that return reading plans to only serve plans that a user's role is entitled to. For example, a `GET /api/reading-plans` endpoint should first check the user's subscription and then filter the returned list of plans.
      * Endpoints that handle the generation of new plans (e.g., AI-curated plans) should also perform this role check before creating the plan.

2.  **Frontend (`client/src/components/BibleReadingPlans.tsx`):**

      * **Conditional Display:** The `BibleReadingPlans` component should fetch the user's subscription plan from the user context.
      * **Upgrade Prompts:** For plans that are gated, display a visually appealing preview card with a lock icon instead of the "start plan" button. The call-to-action on the card should use your grace-driven language (e.g., "Unlock a deeper journey with the Shepherd Plan").
      * This approach provides a clear and celebrated upgrade path for users, turning the desire for new features into a positive step in their spiritual growth.