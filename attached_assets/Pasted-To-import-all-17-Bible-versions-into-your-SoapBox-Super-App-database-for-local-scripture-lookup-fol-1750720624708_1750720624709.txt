To import all 17 Bible versions into your SoapBox Super App database for local scripture lookup, follow this streamlined plan:

---

### ‚úÖ 1. **Data Source Acquisition**

You‚Äôll need the text of all 17 Bible versions in a structured digital format (CSV, JSON, XML, or SQL dump).

#### Sources (per license compliance):

* **Public Domain** (no issues):

  * KJV, ASV, WEB, potentially RSV
* **Free with attribution / open API exports:**

  * NET (from Bible.org), GNT (via Deutsche Bibelgesellschaft if licensed)
* **Licensed versions** (must contact publishers):

  * NIV, NLT, ESV, NASB, NKJV, AMP, MSG, CSB, CEB, CEV, NCV, HCSB, NRSV

> üîê Consider bundling licensed versions into a premium tier and use APIs temporarily for those while awaiting permission.

---

### ‚úÖ 2. **Database Schema Setup**

Assuming your `verses` table already supports:

```ts
Verse {
  id: string;
  book: string;
  chapter: number;
  verse: number;
  text: string;
  translation: string; // e.g., 'KJV', 'NIV'
}
```

Add index on `(book, chapter, verse, translation)` for fast lookups.

---

### ‚úÖ 3. **Import Script (Node.js Example)**

You can write a script like this to ingest versioned CSVs or JSON files:

```ts
import fs from 'fs';
import { db } from './lib/db'; // Your db client (e.g., Prisma, Knex, Supabase)

async function importBibleVersion(filePath: string, versionCode: string) {
  const data = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
  for (const verse of data) {
    await db.verse.create({
      data: {
        book: verse.book,
        chapter: verse.chapter,
        verse: verse.verse,
        text: verse.text,
        translation: versionCode
      },
    });
  }
  console.log(`‚úÖ ${versionCode} imported`);
}

await importBibleVersion('./bibles/kjv.json', 'KJV');
```

Batch the inserts for efficiency (`INSERT MANY` with transaction or use Supabase‚Äôs bulk insert APIs if applicable).

---

### ‚úÖ 4. **Frontend Usage**

When querying:

```sql
SELECT text FROM verses 
WHERE book = 'John' AND chapter = 3 AND verse = 16 AND translation = 'ESV';
```

---

### ‚úÖ 5. **Compression & Indexing**

* Compress text tables using PostgreSQL `pgroonga` or `GIN` full-text search indexing.
* Store scripture references separately from text if offering cross-version parallel reading.

---

### ‚úÖ 6. **Long-Term Maintenance**

* Store metadata for each version (license, source, date, etc.)
* Add version control (`version_hash`) to detect content changes or updates.

---

### üõ† Optional Tools

* [OpenBibleData.org](https://openbibledata.org/)
* [BibleGateway API](https://www.biblegateway.com/usage/v2/)
* [DBP API from Faith Comes By Hearing](https://api.dbp.test.bible/)
* `usfm-js` for parsing official USFM Bible source files

---

Would you like a custom import script scaffold that can parse multiple versions from JSON or CSV in bulk?
