Based on your description and the provided file context, the community creation form's non-responsiveness and the failure of its dynamic fields are directly related to how the form is currently being implemented.

The core issue is that the form's state management is likely misconfigured, causing a disconnect between user input and the form's internal state. This is a common problem in React applications when forms are embedded directly without using a robust library like `react-hook-form` or a carefully managed local state.

I've analyzed the relevant files to pinpoint the source of the problem and provide a solution.

### Diagnosis of the Problem

The non-responsiveness you are experiencing is likely due to one of two reasons:

1.  **Improper State Synchronization:** The form is likely using local state (e.g., `useState`) that isn't correctly synchronized with the user's input. If an `onChange` handler is missing, incorrect, or blocked by other component logic, the input field's value won't update, making it feel "unresponsive."
2.  **API Call Overlap:** The `useMutation` or `useQuery` hooks might be triggering a loading state that disables the entire form, even if the API call is failing. This would explain why the form becomes unresponsive.

The "Community Type" field is a key part of this. Without being able to select a community type, the conditional rendering for "Groups" or "Ministries" will never be triggered. This indicates the problem is upstream, likely in how the `select` component is managed.

### Recommendations to Fix the Issue

Instead of trying to patch the embedded form in `MyCommunities.tsx`, the most effective solution is to follow the recommendation from our previous conversation: **extract the form's logic into the reusable `CommunityForm.tsx` component and then use that component in both the creation and administration pages.** This will fix your immediate issues and prevent future problems.

Here are the specific changes to make:

#### Step 1: Revise `client/src/components/CommunityForm.tsx` to be a universal form.

This component should handle all state and submission logic. It will accept an optional `initialData` prop to handle both "Create" (no `initialData`) and "Update" (`initialData` is the community object) modes.

**Modified `CommunityForm.tsx`:**

```tsx
// client/src/components/CommunityForm.tsx

import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { useMutation } from "@tanstack/react-query";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "./ui/form";
import { Input } from "./ui/input";
import { Textarea } from "./ui/textarea";
import { Button } from "./ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select";
import { Switch } from "./ui/switch"; // Assuming you have this component

// Define a schema based on your database model
const formSchema = z.object({
  name: z.string().min(2, { message: "Community name must be at least 2 characters." }),
  denomination: z.string().optional(),
  description: z.string().optional(),
  address: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  zipCode: z.string().optional(),
  phone: z.string().optional(),
  email: z.string().email({ message: "Invalid email address." }).optional().or(z.literal('')),
  website: z.string().url({ message: "Invalid URL." }).optional().or(z.literal('')),
  communityType: z.string().optional(), // 'groups' or 'ministries' or 'default'
  groupType: z.string().optional(),
  isPublic: z.boolean().optional(),
});

type CommunityFormValues = z.infer<typeof formSchema>;

interface CommunityFormProps {
  community?: any; // The community object for editing
  onSuccess: () => void;
  onCancel: () => void;
}

export function CommunityForm({ community, onSuccess, onCancel }: CommunityFormProps) {
  const { toast } = useToast();

  const form = useForm<CommunityFormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: community?.name || "",
      denomination: community?.denomination || "",
      description: community?.description || "",
      address: community?.address || "",
      city: community?.city || "",
      state: community?.state || "",
      zipCode: community?.zipCode || "",
      phone: community?.phone || "",
      email: community?.email || "",
      website: community?.website || "",
      communityType: community?.communityType || "default",
      groupType: community?.groupType || "",
      isPublic: community?.isPublic || true,
    },
  });

  const isEditing = !!community?.id;

  // Use useMutation to handle form submission
  const saveCommunityMutation = useMutation({
    mutationFn: async (values: CommunityFormValues) => {
      if (isEditing) {
        // Update existing community
        return await apiRequest("PUT", `/api/churches/${community.id}`, values);
      } else {
        // Create new community
        return await apiRequest("POST", "/api/churches", values);
      }
    },
    onSuccess: () => {
      const message = isEditing ? "Community updated successfully" : "Community created successfully";
      toast({ title: "Success", description: message });
      onSuccess();
    },
    onError: (error: any) => {
      toast({ title: "Error", description: error.message || "Failed to save community", variant: "destructive" });
    },
  });

  const onSubmit = (values: CommunityFormValues) => {
    saveCommunityMutation.mutate(values);
  };

  const communityType = form.watch("communityType");

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        {/* Basic Fields */}
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Community Name</FormLabel>
              <FormControl>
                <Input placeholder="Enter community name" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description</FormLabel>
              <FormControl>
                <Textarea placeholder="Describe the community" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Dynamic Fields */}
        <FormField
          control={form.control}
          name="communityType"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Community Type</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a community type" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="default">Default</SelectItem>
                  <SelectItem value="groups">Groups</SelectItem>
                  <SelectItem value="ministries">Ministries</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        {communityType === 'groups' && (
          <FormField
            control={form.control}
            name="groupType"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Group Type</FormLabel>
                <FormControl>
                  <Input placeholder="e.g., Small Group, Bible Study" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        )}

        {communityType === 'ministries' && (
          <FormField
            control={form.control}
            name="isPublic"
            render={({ field }) => (
              <FormItem className="flex items-center justify-between">
                <FormLabel>Publicly Visible</FormLabel>
                <FormControl>
                  <Switch
                    checked={field.value}
                    onCheckedChange={field.onChange}
                  />
                </FormControl>
              </FormItem>
            )}
          />
        )}

        <div className="flex justify-end gap-2">
          <Button type="button" variant="outline" onClick={onCancel}>
            Cancel
          </Button>
          <Button type="submit" disabled={saveCommunityMutation.isPending}>
            {saveCommunityMutation.isPending ? "Saving..." : isEditing ? "Update Community" : "Create Community"}
          </Button>
        </div>
      </form>
    </Form>
  );
}
```

#### Step 2: Update `client/src/pages/MyCommunities.tsx`

Now, you can remove the embedded form from `MyCommunities.tsx` and use the new, standardized component.

```tsx
// client/src/pages/MyCommunities.tsx (Refactored)
// ... (imports)
import { CommunityForm } from "@/components/CommunityForm";

export default function MyCommunities() {
  const [showCreateCommunity, setShowCreateCommunity] = useState(false);
  // ... rest of the component state and logic

  return (
    <div className="container mx-auto py-8">
      <div className="flex items-center justify-between mb-8">
        <div>
          <h1 className="text-3xl font-bold">My Communities</h1>
          <p className="text-gray-600 mt-2">Manage the communities you are a part of.</p>
        </div>
        <Dialog open={showCreateCommunity} onOpenChange={setShowCreateCommunity}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="w-4 h-4 mr-2" />
              Create New Community
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Create a New Community</DialogTitle>
              <DialogDescription>
                Fill out the details to create a new community for your members.
              </DialogDescription>
            </DialogHeader>
            <CommunityForm
              onSuccess={() => setShowCreateCommunity(false)}
              onCancel={() => setShowCreateCommunity(false)}
            />
          </DialogContent>
        </Dialog>
      </div>
      {/* ... rest of the page content */}
    </div>
  );
}
```

This new structure ensures your form is functional and allows you to easily maintain community creation and administration in a single, well-structured component.