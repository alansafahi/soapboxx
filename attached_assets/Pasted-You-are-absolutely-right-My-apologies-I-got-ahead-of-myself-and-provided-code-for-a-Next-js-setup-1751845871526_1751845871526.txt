You are absolutely right\! My apologies. I got ahead of myself and provided code for a Next.js setup. Thank you for the correction.

Let's do this correctly, following your project's architecture: an **Express backend** and a **React frontend with Wouter for routing**.

Here is the correct code for the Leaderboard feature, tailored specifically for the SoapBox Super App.

-----

### 1\. Backend: Express API Route

First, we'll add the new route to your Express server.

In `server/routes.ts`, I'll add the logic to handle the leaderboard data request.

```typescript
// server/routes.ts

// ... other imports
import { db } from './db'; // Make sure you have your Drizzle db instance
import { users, posts, comments, likes } from '../db/schema'; // Adjust path to your schema
import { sql } from 'drizzle-orm';
import { Router } from 'express';

const router = Router();

// ... (all your other existing routes)

// --- NEW LEADERBOARD ROUTE ---
router.get('/leaderboard', async (req, res) => {
  try {
    const leaderboardData = await db
      .select({
        id: users.id,
        firstName: users.firstName,
        lastName: users.lastName,
        avatarUrl: users.avatarUrl,
        score: sql<number>`
          (
            (SELECT COUNT(*) FROM ${posts} WHERE ${posts}.userId = ${users}.id) * 5 +
            (SELECT COUNT(*) FROM ${comments} WHERE ${comments}.userId = ${users}.id) * 2 +
            (
              SELECT COUNT(*) FROM ${likes}
              INNER JOIN ${posts} ON ${likes}.postId = ${posts}.id
              WHERE ${posts}.userId = ${users}.id
            ) * 1
          )::int
        `,
      })
      .from(users)
      .orderBy(sql`score DESC`)
      .limit(100);

    const rankedLeaderboard = leaderboardData.map((user, index) => ({
      ...user,
      rank: index + 1,
    }));

    res.status(200).json(rankedLeaderboard);
  } catch (error) {
    console.error('Error fetching leaderboard data:', error);
    res.status(500).json({ error: 'Failed to fetch leaderboard data.' });
  }
});

export const apiRoutes = router;

// Make sure this new route is registered in your main server file (e.g., server/index.ts)
// something like: app.use('/api', apiRoutes);
```

### 2\. Frontend: Leaderboard Page and Component

Now for the React frontend. I'll create a new page and a component to display the leaderboard.

**New Page: `client/src/pages/leaderboard.tsx`**
This file will simply render our new `Leaderboard` component.

```tsx
// client/src/pages/leaderboard.tsx
import React from 'react';
import Leaderboard from '../components/Leaderboard'; // We will create this next

const LeaderboardPage: React.FC = () => {
  return <Leaderboard />;
};

export default LeaderboardPage;
```

**New Component: `client/src/components/Leaderboard.tsx`**
This is the component that does the work of fetching and displaying the data.

```tsx
// client/src/components/Leaderboard.tsx
import React, { useState, useEffect } from 'react';

// Define the structure of our leaderboard data
interface LeaderboardEntry {
  rank: number;
  id: string;
  firstName: string;
  lastName: string;
  avatarUrl: string | null;
  score: number;
}

const Leaderboard: React.FC = () => {
  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchLeaderboard = async () => {
      try {
        setLoading(true);
        // This fetch call targets our new Express endpoint
        const response = await fetch('/api/leaderboard');
        if (!response.ok) {
          throw new Error('Failed to fetch leaderboard data.');
        }
        const data: LeaderboardEntry[] = await response.json();
        setLeaderboard(data);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'An unknown error occurred.');
      } finally {
        setLoading(false);
      }
    };

    fetchLeaderboard();
  }, []);

  if (loading) {
    return <div className="text-center p-8">Loading Leaderboard...</div>;
  }

  if (error) {
    return <div className="text-center p-8 text-red-500">Error: {error}</div>;
  }

  return (
    <div className="container mx-auto p-4 sm:p-6 lg:p-8">
      <h1 className="text-3xl font-bold mb-6 text-gray-800 dark:text-white">üèÜ Engagement Leaderboard</h1>
      <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full leading-normal">
            <thead>
              <tr>
                <th className="px-5 py-3 border-b-2 border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-900 text-left text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase tracking-wider">
                  Rank
                </th>
                <th className="px-5 py-3 border-b-2 border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-900 text-left text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase tracking-wider">
                  User
                </th>
                <th className="px-5 py-3 border-b-2 border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-900 text-left text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase tracking-wider">
                  Score
                </th>
              </tr>
            </thead>
            <tbody>
              {leaderboard.map((entry) => (
                <tr key={entry.id} className="hover:bg-gray-50 dark:hover:bg-gray-700">
                  <td className="px-5 py-4 border-b border-gray-200 dark:border-gray-700 text-sm">
                    <p className="text-gray-900 dark:text-white whitespace-no-wrap font-bold text-lg">{entry.rank}</p>
                  </td>
                  <td className="px-5 py-4 border-b border-gray-200 dark:border-gray-700 text-sm">
                    <div className="flex items-center">
                      <div className="flex-shrink-0 w-10 h-10">
                        <img
                          className="w-full h-full rounded-full"
                          src={entry.avatarUrl || '/default-avatar.png'}
                          alt={`${entry.firstName} ${entry.lastName}`}
                        />
                      </div>
                      <div className="ml-3">
                        <p className="text-gray-900 dark:text-white whitespace-no-wrap">
                          {entry.firstName} {entry.lastName}
                        </p>
                      </div>
                    </div>
                  </td>
                  <td className="px-5 py-4 border-b border-gray-200 dark:border-gray-700 text-sm">
                    <p className="text-gray-900 dark:text-white whitespace-no-wrap font-semibold">{entry.score}</p>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default Leaderboard;
```

### 3\. Frontend: Routing and Navigation

Finally, let's make the new page accessible.

**Add the route in `client/src/App.tsx`**

```tsx
// client/src/App.tsx
// ... other imports
import { Switch, Route, Router } from "wouter";
import LeaderboardPage from "./pages/leaderboard"; // Import the new page

// ...

function App() {
  // ... existing code
  return (
    // ...
    <Switch>
      {/* ... other routes */}
      <Route path="/leaderboard" component={LeaderboardPage} />
      {/* ... other routes */}
    </Switch>
    // ...
  );
}
```

**Add the link in `client/src/components/SidebarFixed.tsx`**
This uses a standard `<a>` tag with Wouter's `Link` component.

```tsx
// client/src/components/SidebarFixed.tsx
// ... other imports
import { Link } from "wouter";

// ... inside the component's return statement, within the navigation list (<ul>)

<li>
  <Link
    to="/leaderboard"
    className="block text-slate-200 truncate transition duration-150 hover:text-white"
  >
    <div className="flex items-center">
        <svg className="shrink-0 h-6 w-6" viewBox="0 0 24 24">
            <path
              className="fill-current text-slate-600"
              d="M16 11V3H8v8H2v10h20V11h-6zM10 5h4v14h-4V5zM4 13h4v6H4v-6zm16 6h-4v-6h4v6z"
            />
        </svg>
      <span className="text-sm font-medium ml-3 lg:opacity-0 lg:sidebar-expanded:opacity-100 2xl:opacity-100 duration-200">
        Leaderboard
      </span>
    </div>
  </Link>
</li>

// ... rest of the list
```

This code is now correctly aligned with your project's structure. My apologies again for the mix-up.

Now, we can confidently move on to the next item: **"Failed to add a church"**. Shall we proceed?