Instructions for Replit to Implement Enhanced Reading Plans
The implementation will focus on expanding the core reading plan system to support these new plan types. The existing readingPlans and readingPlanDays tables are already well-structured for this.

Part 1: Backend Infrastructure Updates
Update shared/schema.ts for New Plan Types and Fields:

New Plan Types: Your readingPlans table has a type column. Update the schema to include the new plan types: 'topical', 'chronological', 'book_study', 'audio'.

Plan Data: The readingPlanDays table is perfect for storing the daily content. For chronological plans, the dayNumber will define the order. For topical plans, the tags field can be used to categorize the daily verses.

Modify server/storage.ts to Handle New Plans:

Add Seeding Logic: Create a new function (or a SQL script) to seed the database with the content for the new plans you've suggested (New Testament in a Year, Gospels in 40 Days, etc.). The existing scripts/seed-reading-plans.sql can be used as a template.

Implement AI-Powered Plan Generation:

Create a new function (e.g., generateThematicPlan) that uses the existing ai-personalization.ts service to curate thematic plans. This function would take a topic (e.g., "peace") and generate a series of verses and devotional content, then insert it into the readingPlans and readingPlanDays tables for a user.

Leverage the AI to suggest personalized reflections and prayers, using the reflectionQuestion and prayerPrompt fields.

Update server/routes.ts for Plan Management and Gating:

Create New Endpoints: Add new API routes to handle the new plans, such as GET /api/reading-plans/thematic/:topic.

Implement Role-Based Access Control: In these new endpoints, use isAuthenticated followed by a role check to ensure that premium plans and AI-generated content are only accessible to the correct subscription tiers. For example, the AI-Powered Audio Bible and AI Video Content Generation features should be gated behind a Premium or Mission plan.

Part 2: Frontend UI/UX Enhancements
Revise the BibleReadingPlans.tsx Component:

Differentiated UI: Update the BibleReadingPlans.tsx component to visually differentiate between plan types (e.g., with unique icons, colors, and labels).

Feature Gate Plans: Use a useChurchFeatures or similar hook to conditionally show or hide plans based on the user's subscription. The AI-powered or chronological plans would be gated for Standard or Premium users, with a clear call-to-action to upgrade.

Aspirational Language: Implement the grace-driven paywall language you suggested. Instead of a hard "locked" state, you could display a plan with a lock icon and a message like, "Unlock your full spiritual potential with the Fellowship Plan," or a mission-based upgrade prompt.

This strategic update will not only fix the current plan differentiation issue but also provide a powerful new tool for user engagement and monetization, all while adhering to your company's development standards.







