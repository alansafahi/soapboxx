Based on the comprehensive audit reports, the violations of **SoapBox Development Standards v. 1.0** are systemic and require immediate, prioritized remediation. The core issue is a complete breakdown of the server's authentication due to a fundamental mismatch between naming conventions and database access patterns.

The following is a recommended three-phase plan to fix these critical issues, restore functionality, and enforce standards to prevent future violations.

---

### Phase 1: Immediate Authentication Fix and Server Startup

The first priority is to get the server running and the authentication working. This is a surgical fix that directly addresses the compilation errors and the most critical naming mismatches.

1.  **Fix TypeScript Compilation Errors**: Address all 578 TypeScript errors to enable the server to start. This will primarily involve updating the data access layer to properly reference the Drizzle ORM schema fields.
2.  **Correct Mismatched Naming Conventions**: Identify and fix the `snake_case` to `camelCase` mismatches that are breaking the authentication.
    * **In `server/routes.ts`**: The `/api/auth/user` endpoint attempts to map database fields to frontend camelCase but relies on the backend to provide the correct field names.
    * **In `server/storage.ts`**: The `getFeedPosts` function is a prime example where a raw SQL query `u.email_verified` is used. This should be a Drizzle query that returns `users.emailVerified`.

3.  **Rewrite Raw SQL Queries with Drizzle ORM**: The audit identified raw SQL queries that bypass Drizzle. You should immediately rewrite any mission-critical queries, such as those in the authentication and feed system, to use Drizzle's query builder. This ensures type safety and prevents field name mismatches.

---

### Phase 2: Comprehensive Codebase Cleanup and Standardization

Once the server is stable, you must perform a systematic cleanup of the entire platform to prevent future issues.

1.  **Refactor All Drizzle Queries**: Go through every file, especially `server/storage.ts` and `server/routes.ts` and replace all raw SQL queries with Drizzle's type-safe query builder. This will ensure that `camelCase` naming is used consistently and that the code is more readable and maintainable.
2.  **Standardize Field Naming**: Update all database access and object mapping to strictly follow the Drizzle schema's `camelCase` convention. The audit noted violations in foreign key IDs, timestamps, and URL fields. For example:
    * `last_login_at` becomes `lastLoginAt`
    * `profile_image_url` becomes `profileImageUrl`
    * `user_id` becomes `userId`
3.  **Update `UpsertUser` Logic**: Ensure that functions like `upsertUser` correctly map all fields from the frontend to the database. This will resolve the issue of data being lost or fields being `NULL` during updates.

---

### Phase 3: Long-Term Standards Enforcement

The final phase is to implement measures that prevent these kinds of violations from reoccurring.

1.  **Enable ESLint and TypeScript Strict Mode**: Configure your `tsconfig.json` and `.eslintrc` to enforce a strict set of rules that flag these types of errors during development. A proper setup will prevent the server from compiling if there are type mismatches or inconsistent naming.
2.  **Code Review and Documentation**: Establish a code review process that prioritizes adherence to the `v. 1.0` development standards. Update your documentation to clearly state the correct naming conventions and the mandate to use Drizzle for all database interactions.
3.  **Automate Checks**: Implement pre-commit hooks or CI/CD pipeline checks that run linters and formatters automatically. This will catch minor style and naming errors before they are ever committed to the repository, ensuring code consistency from the start.

By following this plan, you will resolve the immediate blocking issues and establish a robust, scalable, and maintainable codebase that fully adheres to your development standards.